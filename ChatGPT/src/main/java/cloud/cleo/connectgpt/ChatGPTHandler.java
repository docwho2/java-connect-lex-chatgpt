/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package cloud.cleo.connectgpt;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.softwarebymark.lex.AbstractLexRequestHandler;
import com.github.softwarebymark.lex.domain.FulfillmentState;
import com.github.softwarebymark.lex.domain.Intent;
import com.github.softwarebymark.lex.domain.LexRequest;
import com.github.softwarebymark.lex.domain.LexResponse;
import com.github.softwarebymark.lex.domain.action.CloseDialogAction;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.service.OpenAiService;
import java.net.SocketTimeoutException;
import java.time.LocalDate;
import java.util.Map;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import software.amazon.awssdk.core.SdkSystemSetting;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.Key;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AtomicCounterExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.connect.ConnectClient;

/**
 * Receive a ConnectEvent via SNS
 *
 * @author sjensen
 */
public class ChatGPTHandler extends AbstractLexRequestHandler {

    // Initialize the Log4j logger.
    Logger log = LogManager.getLogger();

    final static ObjectMapper mapper = new ObjectMapper();

    final static ConnectClient connect = ConnectClient.builder()
            .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable())))
            .build();

    final static TableSchema<SessionState> schema = TableSchema.fromBean(SessionState.class);

    final static DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()
            .extensions(AutoGeneratedTimestampRecordExtension.create(), AtomicCounterExtension.builder().build()).build();

    final static DynamoDbTable<SessionState> sessionState = enhancedClient.table(System.getenv("SESSION_TABLE_NAME"), schema);

    final static OpenAiService open_ai_service = new OpenAiService(System.getenv("OPENAI_API_KEY"));
    final static String OPENAI_MODEL = System.getenv("OPENAI_MODEL");

    @Override
    public LexResponse handleRequest(LexRequest lexRequest, Map<String, String> sessionAttributes) {
        try {
            final var intentName = lexRequest.getSessionState().getIntent().getName();
            log.debug("Intent: " + intentName);
            if ("FallbackIntent".equalsIgnoreCase(intentName)) {
                return processGPT(lexRequest);
            }
        } catch (Exception e) {
            log.error(e);

            if ("es_US".equalsIgnoreCase(lexRequest.getLocaleId())) {
                return new LexResponse(lexRequest, new CloseDialogAction(FulfillmentState.Fulfilled),
                        "Lo siento, tengo un problema para cumplir con su solicitud. Es posible que el chat GPT esté inactivo. Vuelva a intentarlo más tarde.");
            } else {
                return new LexResponse(lexRequest, new CloseDialogAction(FulfillmentState.Fulfilled),
                        "Sorry, I'm having a problem fulfilling your request.  Chat GPT might be down, Please try again later.");
            }
        }

        return new LexResponse(lexRequest, new CloseDialogAction(FulfillmentState.Fulfilled),
                "Could Not match any intents.");
    }

    private LexResponse processGPT(LexRequest lexRequest) {

        final var input = lexRequest.getInputTranscript();

        log.debug("Language is [" + lexRequest.getLocaleId()+ "]" );
        
        if (input == null || input.isBlank()) {
            log.debug("Got blank input, so just silent or nothing");
            // If we get slience (timeout without speech), then we get empty string on the intent
            if ("es_US".equalsIgnoreCase(lexRequest.getLocaleId())) {
                return new LexResponse(lexRequest, new CloseDialogAction(FulfillmentState.Fulfilled),
                        "Lo siento, no entendí eso, si terminaste, simplemente dime adiós, de lo contrario, dime cómo puedo ayudarte.");
            } else {
                return new LexResponse(lexRequest, new CloseDialogAction(FulfillmentState.Fulfilled),
                        "I'm sorry, I didn't catch that, if your done, simply say good by, otherwise tell me how I can help");
            }
        }

        // When testing in lex console input will be text, so use session ID, for speech we shoud have a phone via Connect
        final var user_id = "Text".equalsIgnoreCase(lexRequest.getInputMode()) ? lexRequest.getSessionId() : lexRequest.getPhoneNumber();

        // Key to record in Dynamo
        final var key = Key.builder().partitionValue(user_id).sortValue(LocalDate.now().toString()).build();

        //  load session state if it exists
        log.debug("Start Retreiving Session State");
        var session = sessionState.getItem(key);
        log.debug("End Retreiving Session State");

        if (session == null) {
            session = new SessionState(user_id, LocalDate.now(), lexRequest.getLocaleId());
        }

        // add this request to the session
        session.addUserMessage(input);

        String botResponse;
        try {

            ChatCompletionRequest request = ChatCompletionRequest.builder()
                    .messages(session.getChatMessages())
                    .model(OPENAI_MODEL)
                    .maxTokens(500)
                    .temperature(0.2) // More focused
                    .n(1) // Only return 1 completion
                    .build();

            log.debug("Start API Call to ChatGPT");
            final var completion = open_ai_service.createChatCompletion(request);
            log.debug("End API Call to ChatGPT");
            log.debug(completion);

            botResponse = completion.getChoices().get(0).getMessage().getContent();

            // Add response to session
            session.addAssistantMessage(botResponse);

            // Save the session to dynamo
            log.debug("Start Saving Session State");
            session.incrementCounter();
            sessionState.putItem(session);
            log.debug("End Saving Session State");
        } catch (RuntimeException rte) {
            if (rte.getCause() != null && rte.getCause() instanceof SocketTimeoutException) {
                log.error("Response times out", rte);
                if ("es_US".equalsIgnoreCase(lexRequest.getLocaleId())) {
                    botResponse = "Se agotó el tiempo de espera de la operación, vuelva a hacer su pregunta";
                } else {
                    botResponse = "The operation timed out, please ask your question again";
                }
            } else {
                throw rte;
            }
        }

        return new LexResponse(lexRequest, new CloseDialogAction(FulfillmentState.Fulfilled), botResponse);

    }

}
